/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    mutation AddReview($repairShopId: String!, $rating: Int!, $comment: String) {\n        addReview(request:  {\n            repairShopId: $repairShopId,\n            rating: $rating,\n            comment: $comment\n        })\n    }\n": typeof types.AddReviewDocument,
    "\n    query AuthContext {\n        me {\n            email,\n            name,\n            phone,\n            phoneRegionCode,\n            preferredContactMethod,\n            preferredReturnMethod,\n            address {\n                recipientName,\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city,\n                country\n            }\n            isBusiness\n        }\n    }\n": typeof types.AuthContextDocument,
    "\n    mutation BookRepair($request: BookRepairRequestInput!){\n        bookRepair(request: $request){\n            id\n            repairShop{\n                address{\n                    recipientName,\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city,\n                    country\n                }\n            }\n            createdAt\n        }\n    }\n": typeof types.BookRepairDocument,
    "\n    query GetCustomerRepairs($pageNumber: Int!, $pageSize: Int!) {\n        me{\n            repairs(request:  {\n                pageNumber: $pageNumber,\n                pageSize: $pageSize\n            }){\n                items{\n                    id\n                    deviceInfo {\n                        manufacturer,\n                        model\n                    },\n                    faultInfo{\n                        description\n                    }\n                    status\n                }\n                pageNumber,\n                pageSize,\n                totalCount,\n                totalPages\n            }\n        }\n    }\n": typeof types.GetCustomerRepairsDocument,
    "\n    query GetRepair($repairId: String!) {\n        repair(request:{repairId: $repairId}) {\n            id,\n            repairShop{\n                id,\n                name\n            },\n            status,\n            deviceInfo {\n                deviceType,\n                manufacturer,\n                model,\n                serialNumber\n            },\n            faultInfo {\n                whenOccurred,\n                howToReproduce,\n                description,\n                previouslyRepaired\n            },\n            additionalComment\n        }\n    }\n": typeof types.GetRepairDocument,
    "\n    query GetRepairShop($id: String!) {\n        repairShop(request:{ id: $id })\n        {\n            id,\n            name,\n            email,\n            phone,\n            timeZoneId,\n            rating,\n            reviewCount,\n            aboutUs,\n            address{\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city\n            },\n            openingHours{\n                monday{\n                    from,\n                    to\n                },\n                tuesday{\n                    from,\n                    to\n                },\n                wednesday{\n                    from,\n                    to\n                },\n                thursday{\n                    from,\n                    to\n                },\n                friday{\n                    from,\n                    to\n                },\n                saturday{\n                    from,\n                    to\n                },\n                sunday{\n                    from,\n                    to\n                }\n            }\n        }\n    }\n": typeof types.GetRepairShopDocument,
    "\n    query Reviews($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    reviews(request:  {\n       repairShopId: $repairShopId,\n       pageNumber: $pageNumber,\n       pageSize: $pageSize\n    }){\n      items{\n        id,\n        authorName,\n        rating,\n        comment,\n      },\n      pageNumber,\n      totalCount,\n      totalPages\n    }\n}\n": typeof types.ReviewsDocument,
    "\n    query Services($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    services(request:  {\n        repairShopId: $repairShopId,\n        pageNumber: $pageNumber,\n        pageSize: $pageSize\n    }){\n        items{\n            name,\n            price\n        },\n        pageNumber,\n        totalCount,\n        totalPages\n    }\n}\n": typeof types.ServicesDocument,
    "\n    mutation Login($email: String!, $password: String!) {\n        login( request: {email: $email, password: $password, rememberMe: true} )\n    }\n": typeof types.LoginDocument,
    "\n    mutation Logout {\n        logout\n    }\n": typeof types.LogoutDocument,
    "\n    mutation Register($email: String!, $password: String!, $isBusiness: Boolean!, $firstName: String, $lastName: String, $companyName: String, $taxIdNumber: String) {\n        register( request: {\n            email: $email,\n            password: $password,\n            isBusiness: $isBusiness,\n            firstName: $firstName,\n            lastName: $lastName,\n            companyName: $companyName,\n            taxIdNumber: $taxIdNumber\n        })\n    }\n": typeof types.RegisterDocument,
    "\n    query Search($name: String!, $pageNumber: Int!, $pageSize: Int!) {\n        searchShopsByName(request:  {\n            name: $name,\n            pageNumber: $pageNumber,\n            pageSize: $pageSize\n        })\n        {\n            items{\n                id,\n                name,\n                timeZoneId,\n                rating,\n                reviewCount,\n                address{\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city\n                },\n                openingHours{\n                    monday{\n                        from,\n                        to\n                    },\n                    tuesday{\n                        from,\n                        to\n                    },\n                    wednesday{\n                        from,\n                        to\n                    },\n                    thursday{\n                        from,\n                        to\n                    },\n                    friday{\n                        from,\n                        to\n                    },\n                    saturday{\n                        from,\n                        to\n                    },\n                    sunday{\n                        from,\n                        to\n                    }\n                }\n            },\n            pageNumber,\n            totalCount,\n            totalPages\n        }\n    }\n": typeof types.SearchDocument,
};
const documents: Documents = {
    "\n    mutation AddReview($repairShopId: String!, $rating: Int!, $comment: String) {\n        addReview(request:  {\n            repairShopId: $repairShopId,\n            rating: $rating,\n            comment: $comment\n        })\n    }\n": types.AddReviewDocument,
    "\n    query AuthContext {\n        me {\n            email,\n            name,\n            phone,\n            phoneRegionCode,\n            preferredContactMethod,\n            preferredReturnMethod,\n            address {\n                recipientName,\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city,\n                country\n            }\n            isBusiness\n        }\n    }\n": types.AuthContextDocument,
    "\n    mutation BookRepair($request: BookRepairRequestInput!){\n        bookRepair(request: $request){\n            id\n            repairShop{\n                address{\n                    recipientName,\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city,\n                    country\n                }\n            }\n            createdAt\n        }\n    }\n": types.BookRepairDocument,
    "\n    query GetCustomerRepairs($pageNumber: Int!, $pageSize: Int!) {\n        me{\n            repairs(request:  {\n                pageNumber: $pageNumber,\n                pageSize: $pageSize\n            }){\n                items{\n                    id\n                    deviceInfo {\n                        manufacturer,\n                        model\n                    },\n                    faultInfo{\n                        description\n                    }\n                    status\n                }\n                pageNumber,\n                pageSize,\n                totalCount,\n                totalPages\n            }\n        }\n    }\n": types.GetCustomerRepairsDocument,
    "\n    query GetRepair($repairId: String!) {\n        repair(request:{repairId: $repairId}) {\n            id,\n            repairShop{\n                id,\n                name\n            },\n            status,\n            deviceInfo {\n                deviceType,\n                manufacturer,\n                model,\n                serialNumber\n            },\n            faultInfo {\n                whenOccurred,\n                howToReproduce,\n                description,\n                previouslyRepaired\n            },\n            additionalComment\n        }\n    }\n": types.GetRepairDocument,
    "\n    query GetRepairShop($id: String!) {\n        repairShop(request:{ id: $id })\n        {\n            id,\n            name,\n            email,\n            phone,\n            timeZoneId,\n            rating,\n            reviewCount,\n            aboutUs,\n            address{\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city\n            },\n            openingHours{\n                monday{\n                    from,\n                    to\n                },\n                tuesday{\n                    from,\n                    to\n                },\n                wednesday{\n                    from,\n                    to\n                },\n                thursday{\n                    from,\n                    to\n                },\n                friday{\n                    from,\n                    to\n                },\n                saturday{\n                    from,\n                    to\n                },\n                sunday{\n                    from,\n                    to\n                }\n            }\n        }\n    }\n": types.GetRepairShopDocument,
    "\n    query Reviews($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    reviews(request:  {\n       repairShopId: $repairShopId,\n       pageNumber: $pageNumber,\n       pageSize: $pageSize\n    }){\n      items{\n        id,\n        authorName,\n        rating,\n        comment,\n      },\n      pageNumber,\n      totalCount,\n      totalPages\n    }\n}\n": types.ReviewsDocument,
    "\n    query Services($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    services(request:  {\n        repairShopId: $repairShopId,\n        pageNumber: $pageNumber,\n        pageSize: $pageSize\n    }){\n        items{\n            name,\n            price\n        },\n        pageNumber,\n        totalCount,\n        totalPages\n    }\n}\n": types.ServicesDocument,
    "\n    mutation Login($email: String!, $password: String!) {\n        login( request: {email: $email, password: $password, rememberMe: true} )\n    }\n": types.LoginDocument,
    "\n    mutation Logout {\n        logout\n    }\n": types.LogoutDocument,
    "\n    mutation Register($email: String!, $password: String!, $isBusiness: Boolean!, $firstName: String, $lastName: String, $companyName: String, $taxIdNumber: String) {\n        register( request: {\n            email: $email,\n            password: $password,\n            isBusiness: $isBusiness,\n            firstName: $firstName,\n            lastName: $lastName,\n            companyName: $companyName,\n            taxIdNumber: $taxIdNumber\n        })\n    }\n": types.RegisterDocument,
    "\n    query Search($name: String!, $pageNumber: Int!, $pageSize: Int!) {\n        searchShopsByName(request:  {\n            name: $name,\n            pageNumber: $pageNumber,\n            pageSize: $pageSize\n        })\n        {\n            items{\n                id,\n                name,\n                timeZoneId,\n                rating,\n                reviewCount,\n                address{\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city\n                },\n                openingHours{\n                    monday{\n                        from,\n                        to\n                    },\n                    tuesday{\n                        from,\n                        to\n                    },\n                    wednesday{\n                        from,\n                        to\n                    },\n                    thursday{\n                        from,\n                        to\n                    },\n                    friday{\n                        from,\n                        to\n                    },\n                    saturday{\n                        from,\n                        to\n                    },\n                    sunday{\n                        from,\n                        to\n                    }\n                }\n            },\n            pageNumber,\n            totalCount,\n            totalPages\n        }\n    }\n": types.SearchDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AddReview($repairShopId: String!, $rating: Int!, $comment: String) {\n        addReview(request:  {\n            repairShopId: $repairShopId,\n            rating: $rating,\n            comment: $comment\n        })\n    }\n"): (typeof documents)["\n    mutation AddReview($repairShopId: String!, $rating: Int!, $comment: String) {\n        addReview(request:  {\n            repairShopId: $repairShopId,\n            rating: $rating,\n            comment: $comment\n        })\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AuthContext {\n        me {\n            email,\n            name,\n            phone,\n            phoneRegionCode,\n            preferredContactMethod,\n            preferredReturnMethod,\n            address {\n                recipientName,\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city,\n                country\n            }\n            isBusiness\n        }\n    }\n"): (typeof documents)["\n    query AuthContext {\n        me {\n            email,\n            name,\n            phone,\n            phoneRegionCode,\n            preferredContactMethod,\n            preferredReturnMethod,\n            address {\n                recipientName,\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city,\n                country\n            }\n            isBusiness\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation BookRepair($request: BookRepairRequestInput!){\n        bookRepair(request: $request){\n            id\n            repairShop{\n                address{\n                    recipientName,\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city,\n                    country\n                }\n            }\n            createdAt\n        }\n    }\n"): (typeof documents)["\n    mutation BookRepair($request: BookRepairRequestInput!){\n        bookRepair(request: $request){\n            id\n            repairShop{\n                address{\n                    recipientName,\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city,\n                    country\n                }\n            }\n            createdAt\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCustomerRepairs($pageNumber: Int!, $pageSize: Int!) {\n        me{\n            repairs(request:  {\n                pageNumber: $pageNumber,\n                pageSize: $pageSize\n            }){\n                items{\n                    id\n                    deviceInfo {\n                        manufacturer,\n                        model\n                    },\n                    faultInfo{\n                        description\n                    }\n                    status\n                }\n                pageNumber,\n                pageSize,\n                totalCount,\n                totalPages\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCustomerRepairs($pageNumber: Int!, $pageSize: Int!) {\n        me{\n            repairs(request:  {\n                pageNumber: $pageNumber,\n                pageSize: $pageSize\n            }){\n                items{\n                    id\n                    deviceInfo {\n                        manufacturer,\n                        model\n                    },\n                    faultInfo{\n                        description\n                    }\n                    status\n                }\n                pageNumber,\n                pageSize,\n                totalCount,\n                totalPages\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetRepair($repairId: String!) {\n        repair(request:{repairId: $repairId}) {\n            id,\n            repairShop{\n                id,\n                name\n            },\n            status,\n            deviceInfo {\n                deviceType,\n                manufacturer,\n                model,\n                serialNumber\n            },\n            faultInfo {\n                whenOccurred,\n                howToReproduce,\n                description,\n                previouslyRepaired\n            },\n            additionalComment\n        }\n    }\n"): (typeof documents)["\n    query GetRepair($repairId: String!) {\n        repair(request:{repairId: $repairId}) {\n            id,\n            repairShop{\n                id,\n                name\n            },\n            status,\n            deviceInfo {\n                deviceType,\n                manufacturer,\n                model,\n                serialNumber\n            },\n            faultInfo {\n                whenOccurred,\n                howToReproduce,\n                description,\n                previouslyRepaired\n            },\n            additionalComment\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetRepairShop($id: String!) {\n        repairShop(request:{ id: $id })\n        {\n            id,\n            name,\n            email,\n            phone,\n            timeZoneId,\n            rating,\n            reviewCount,\n            aboutUs,\n            address{\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city\n            },\n            openingHours{\n                monday{\n                    from,\n                    to\n                },\n                tuesday{\n                    from,\n                    to\n                },\n                wednesday{\n                    from,\n                    to\n                },\n                thursday{\n                    from,\n                    to\n                },\n                friday{\n                    from,\n                    to\n                },\n                saturday{\n                    from,\n                    to\n                },\n                sunday{\n                    from,\n                    to\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetRepairShop($id: String!) {\n        repairShop(request:{ id: $id })\n        {\n            id,\n            name,\n            email,\n            phone,\n            timeZoneId,\n            rating,\n            reviewCount,\n            aboutUs,\n            address{\n                street,\n                buildingNumber,\n                apartmentNumber,\n                postalCode,\n                city\n            },\n            openingHours{\n                monday{\n                    from,\n                    to\n                },\n                tuesday{\n                    from,\n                    to\n                },\n                wednesday{\n                    from,\n                    to\n                },\n                thursday{\n                    from,\n                    to\n                },\n                friday{\n                    from,\n                    to\n                },\n                saturday{\n                    from,\n                    to\n                },\n                sunday{\n                    from,\n                    to\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Reviews($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    reviews(request:  {\n       repairShopId: $repairShopId,\n       pageNumber: $pageNumber,\n       pageSize: $pageSize\n    }){\n      items{\n        id,\n        authorName,\n        rating,\n        comment,\n      },\n      pageNumber,\n      totalCount,\n      totalPages\n    }\n}\n"): (typeof documents)["\n    query Reviews($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    reviews(request:  {\n       repairShopId: $repairShopId,\n       pageNumber: $pageNumber,\n       pageSize: $pageSize\n    }){\n      items{\n        id,\n        authorName,\n        rating,\n        comment,\n      },\n      pageNumber,\n      totalCount,\n      totalPages\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Services($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    services(request:  {\n        repairShopId: $repairShopId,\n        pageNumber: $pageNumber,\n        pageSize: $pageSize\n    }){\n        items{\n            name,\n            price\n        },\n        pageNumber,\n        totalCount,\n        totalPages\n    }\n}\n"): (typeof documents)["\n    query Services($repairShopId: String!, $pageNumber: Int!, $pageSize: Int!) {\n    services(request:  {\n        repairShopId: $repairShopId,\n        pageNumber: $pageNumber,\n        pageSize: $pageSize\n    }){\n        items{\n            name,\n            price\n        },\n        pageNumber,\n        totalCount,\n        totalPages\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Login($email: String!, $password: String!) {\n        login( request: {email: $email, password: $password, rememberMe: true} )\n    }\n"): (typeof documents)["\n    mutation Login($email: String!, $password: String!) {\n        login( request: {email: $email, password: $password, rememberMe: true} )\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Logout {\n        logout\n    }\n"): (typeof documents)["\n    mutation Logout {\n        logout\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Register($email: String!, $password: String!, $isBusiness: Boolean!, $firstName: String, $lastName: String, $companyName: String, $taxIdNumber: String) {\n        register( request: {\n            email: $email,\n            password: $password,\n            isBusiness: $isBusiness,\n            firstName: $firstName,\n            lastName: $lastName,\n            companyName: $companyName,\n            taxIdNumber: $taxIdNumber\n        })\n    }\n"): (typeof documents)["\n    mutation Register($email: String!, $password: String!, $isBusiness: Boolean!, $firstName: String, $lastName: String, $companyName: String, $taxIdNumber: String) {\n        register( request: {\n            email: $email,\n            password: $password,\n            isBusiness: $isBusiness,\n            firstName: $firstName,\n            lastName: $lastName,\n            companyName: $companyName,\n            taxIdNumber: $taxIdNumber\n        })\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Search($name: String!, $pageNumber: Int!, $pageSize: Int!) {\n        searchShopsByName(request:  {\n            name: $name,\n            pageNumber: $pageNumber,\n            pageSize: $pageSize\n        })\n        {\n            items{\n                id,\n                name,\n                timeZoneId,\n                rating,\n                reviewCount,\n                address{\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city\n                },\n                openingHours{\n                    monday{\n                        from,\n                        to\n                    },\n                    tuesday{\n                        from,\n                        to\n                    },\n                    wednesday{\n                        from,\n                        to\n                    },\n                    thursday{\n                        from,\n                        to\n                    },\n                    friday{\n                        from,\n                        to\n                    },\n                    saturday{\n                        from,\n                        to\n                    },\n                    sunday{\n                        from,\n                        to\n                    }\n                }\n            },\n            pageNumber,\n            totalCount,\n            totalPages\n        }\n    }\n"): (typeof documents)["\n    query Search($name: String!, $pageNumber: Int!, $pageSize: Int!) {\n        searchShopsByName(request:  {\n            name: $name,\n            pageNumber: $pageNumber,\n            pageSize: $pageSize\n        })\n        {\n            items{\n                id,\n                name,\n                timeZoneId,\n                rating,\n                reviewCount,\n                address{\n                    street,\n                    buildingNumber,\n                    apartmentNumber,\n                    postalCode,\n                    city\n                },\n                openingHours{\n                    monday{\n                        from,\n                        to\n                    },\n                    tuesday{\n                        from,\n                        to\n                    },\n                    wednesday{\n                        from,\n                        to\n                    },\n                    thursday{\n                        from,\n                        to\n                    },\n                    friday{\n                        from,\n                        to\n                    },\n                    saturday{\n                        from,\n                        to\n                    },\n                    sunday{\n                        from,\n                        to\n                    }\n                }\n            },\n            pageNumber,\n            totalCount,\n            totalPages\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;