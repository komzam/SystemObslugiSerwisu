// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using system_obslugi_serwisu.Infrastructure.Database;

#nullable disable

namespace system_obslugi_serwisu.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20251020162031_ServicesUsesMoneyVO")]
    partial class ServicesUsesMoneyVO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBusiness")
                        .HasColumnType("boolean");

                    b.Property<int?>("PreferredContactMethod")
                        .HasColumnType("integer");

                    b.Property<int?>("PreferredReturnMethod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.RepairShops.RepairShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AboutUs")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RepairShops");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepairShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RepairShopId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RepairShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairShopId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Workers.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RepairShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairShopId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("system_obslugi_serwisu.Infrastructure.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Customers.Customer", b =>
                {
                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ApartmentNumber")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Country")
                                .HasColumnType("integer");

                            b1.Property<string>("RecipientName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.OwnsOne("system_obslugi_serwisu.Domain.Shared.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressCustomerId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)");

                                    b2.HasKey("AddressCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressCustomerId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Customers.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LastName")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Customers.Tin", "TaxIdNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("TaxIdNumber");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.RepairShops.RepairShop", b =>
                {
                    b.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.OpeningHours", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("RepairShopId")
                                .HasColumnType("uuid");

                            b1.HasKey("RepairShopId");

                            b1.ToTable("RepairShops");

                            b1.WithOwner()
                                .HasForeignKey("RepairShopId");

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.OwnsOne("system_obslugi_serwisu.Domain.RepairShops.TimeInterval", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningHoursRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeOnly>("From")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeOnly>("To")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("OpeningHoursRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningHoursRepairShopId");
                                });

                            b1.Navigation("Friday");

                            b1.Navigation("Monday");

                            b1.Navigation("Saturday");

                            b1.Navigation("Sunday");

                            b1.Navigation("Thursday");

                            b1.Navigation("Tuesday");

                            b1.Navigation("Wednesday");
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RepairShopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ApartmentNumber")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Country")
                                .HasColumnType("integer");

                            b1.Property<string>("RecipientName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("RepairShopId");

                            b1.ToTable("RepairShops");

                            b1.WithOwner()
                                .HasForeignKey("RepairShopId");

                            b1.OwnsOne("system_obslugi_serwisu.Domain.Shared.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressRepairShopId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)");

                                    b2.HasKey("AddressRepairShopId");

                                    b2.ToTable("RepairShops");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressRepairShopId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RepairShopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.HasKey("RepairShopId");

                            b1.ToTable("RepairShops");

                            b1.WithOwner()
                                .HasForeignKey("RepairShopId");
                        });

                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<Guid>("RepairShopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("RepairShopId");

                            b1.ToTable("RepairShops");

                            b1.WithOwner()
                                .HasForeignKey("RepairShopId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("OpeningHours")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Reviews.Review", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Domain.Customers.Customer", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("system_obslugi_serwisu.Domain.RepairShops.RepairShop", "RepairShop")
                        .WithMany("Reviews")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("RepairShop");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Services.Service", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Domain.RepairShops.RepairShop", "RepairShop")
                        .WithMany("Services")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("system_obslugi_serwisu.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("RepairShop");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.Workers.Worker", b =>
                {
                    b.HasOne("system_obslugi_serwisu.Domain.RepairShops.RepairShop", "RepairShop")
                        .WithMany("Workers")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairShop");
                });

            modelBuilder.Entity("system_obslugi_serwisu.Domain.RepairShops.RepairShop", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
